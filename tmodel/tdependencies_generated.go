package engine

import(
	"github.com/ekara-platform/model"
)

//*****************************************************************************
//
// This file is autogenerated by "go generate .". Do not modify.
//
//*****************************************************************************

// ----------------------------------------------------
// TDependencies is a read only list of stack dependencies
// ----------------------------------------------------
type TDependencies interface {
    //HasDependencies returns true if there is dependencies
    HasDependencies() bool
    //Dependencies returns the references of stacks we depend on
    Dependencies() []TStackRef
	
}

// ----------------------------------------------------
// Implementation(s) of TDependencies  
// ----------------------------------------------------

//TDependenciesOnDependenciesHolder is the struct containing the Dependencies in otder to implement TDependencies  
type TDependenciesOnDependenciesHolder struct {
	h 	model.Dependencies
}

//CreateTDependenciesForDependencies returns a holder implementing TDependencies
func CreateTDependenciesForDependencies(o model.Dependencies) TDependenciesOnDependenciesHolder {
	return TDependenciesOnDependenciesHolder{
		h: o,
	}
}

//HasDependencies returns true if there is dependencies
func (r TDependenciesOnDependenciesHolder) HasDependencies() bool{
	return len(r.h.Content) > 0
}

//Dependencies returns the references of stacks we depend on
func (r TDependenciesOnDependenciesHolder) Dependencies() []TStackRef{
	    result := make([]TStackRef, 0, 0)
    for _ , val := range r.h.Content{
        result = append(result, CreateTStackRefForStackRef(val))
    }
    return result

}

