package tmodel

import (
	"github.com/ekara-platform/model"
)

//*****************************************************************************
//
// This file is autogenerated by "go generate .". Do not modify.
//
//*****************************************************************************

// TRepository is a read only repository
type TRepository interface {
	//Scm returns the type of the source control management holding the repository
	Scm() string
	//URL returns the url where the repository is located
	URL() TURL
	//Ref returns the reference (tag,branch, ...) to use within the repository
	Ref() string
	//DescriptorName returns the name of the ekara descriptor for this repository
	DescriptorName() string
}

// ----------------------------------------------------
// Implementation(s) of TRepository
// ----------------------------------------------------

//TRepositoryOnRepositoryHolder is the struct containing the Repository in order to implement TRepository
type TRepositoryOnRepositoryHolder struct {
	h model.Repository
}

//CreateTRepositoryForRepository returns an holder of Repository implementing TRepository
func CreateTRepositoryForRepository(o model.Repository) TRepositoryOnRepositoryHolder {
	return TRepositoryOnRepositoryHolder{
		h: o,
	}
}

//Scm returns the type of the source control management holding the repository
func (r TRepositoryOnRepositoryHolder) Scm() string {
	return string(r.h.Scm)
}

//URL returns the url where the repository is located
func (r TRepositoryOnRepositoryHolder) URL() TURL {
	return CreateTURLForEkUrl(r.h.Url)
}

//Ref returns the reference (tag,branch, ...) to use within the repository
func (r TRepositoryOnRepositoryHolder) Ref() string {
	return r.h.Ref
}

//DescriptorName returns the name of the ekara descriptor for this repository
func (r TRepositoryOnRepositoryHolder) DescriptorName() string {
	return r.h.DescriptorName
}
