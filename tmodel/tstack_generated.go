package tmodel

import (
	"github.com/ekara-platform/model"
)

//*****************************************************************************
//
// This file is autogenerated by "go generate .". Do not modify.
//
//*****************************************************************************

// TStack is a read only stack
type TStack interface {
	//Name returns the name of the stack
	Name() string
	//Parameters returns the stack parameters
	Parameters() map[string]interface{}
	//EnvVars returns the stack environment variables
	EnvVars() map[string]string
	//HasHooks returns true if the stack has hooks
	HasHooks() bool
	//Hooks returns the stack hooks
	Hooks() TStackHooks
	//HasDeployHooks returns true if the stack has hooks while deploying
	HasDeployHooks() bool
	//HasUndeployHooks returns true if the stack has hooks while undeploying
	HasUndeployHooks() bool
	//Dependencies returns the stack dependencies
	Dependencies() TDependencies
	//HasCopies returns true if the stacks has copies
	HasCopies() bool
	//Copies returns the stack copies
	Copies() map[string]TCopy
}

// ----------------------------------------------------
// Implementation(s) of TStack
// ----------------------------------------------------

//TStackOnStackHolder is the struct containing the Stack in order to implement TStack
type TStackOnStackHolder struct {
	h model.Stack
}

//CreateTStackForStack returns an holder of Stack implementing TStack
func CreateTStackForStack(o model.Stack) TStackOnStackHolder {
	return TStackOnStackHolder{
		h: o,
	}
}

//Name returns the name of the stack
func (r TStackOnStackHolder) Name() string {
	return r.h.Name
}

//Parameters returns the stack parameters
func (r TStackOnStackHolder) Parameters() map[string]interface{} {
	return r.h.Parameters
}

//EnvVars returns the stack environment variables
func (r TStackOnStackHolder) EnvVars() map[string]string {
	return r.h.EnvVars
}

//HasHooks returns true if the stack has hooks
func (r TStackOnStackHolder) HasHooks() bool {
	return r.h.Hooks.HasTasks()
}

//Hooks returns the stack hooks
func (r TStackOnStackHolder) Hooks() TStackHooks {
	return CreateTStackHooksForStackHook(r.h.Hooks)
}

//HasDeployHooks returns true if the stack has hooks while deploying
func (r TStackOnStackHolder) HasDeployHooks() bool {
	return r.h.Hooks.Deploy.HasTasks()
}

//HasUndeployHooks returns true if the stack has hooks while undeploying
func (r TStackOnStackHolder) HasUndeployHooks() bool {
	return r.h.Hooks.Undeploy.HasTasks()
}

//Dependencies returns the stack dependencies
func (r TStackOnStackHolder) Dependencies() TDependencies {
	return CreateTDependenciesForDependencies(r.h.DependsOn)
}

//HasCopies returns true if the stacks has copies
func (r TStackOnStackHolder) HasCopies() bool {
	return len(r.h.Copies.Content) > 0
}

//Copies returns the stack copies
func (r TStackOnStackHolder) Copies() map[string]TCopy {
	result := make(map[string]TCopy)
	for k, val := range r.h.Copies.Content {
		result[k] = CreateTCopyForCopy(val)
	}
	return result

}
