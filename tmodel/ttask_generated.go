package engine

import(
	"github.com/ekara-platform/model"
)

//*****************************************************************************
//
// This file is autogenerated by "go generate .". Do not modify.
//
//*****************************************************************************

// ----------------------------------------------------
// TTask is a read only task
// ----------------------------------------------------
type TTask interface {
    //Name returns the name of the task
    Name() string
    //Playbook returns the playbook linked to the task
    Playbook() string
    //Cron returns the cron linked to the task
    Cron() string
    //Parameters returns the task parameters
    Parameters() map[string]interface{}
    //EnvVars returns the task environment variables
    EnvVars() map[string]string
    //HasHooks returns true if the task has hooks
    HasHooks() bool
    //Hooks returns the task hooks
    Hooks() TTaskHooks
	
}

// ----------------------------------------------------
// Implementation(s) of TTask  
// ----------------------------------------------------

//TTaskOnTaskHolder is the struct containing the Task in order to implement TTask  
type TTaskOnTaskHolder struct {
	h 	model.Task
}

//CreateTTaskForTask returns an holder of Task implementing TTask
func CreateTTaskForTask(o model.Task) TTaskOnTaskHolder {
	return TTaskOnTaskHolder{
		h: o,
	}
}

//Name returns the name of the task
func (r TTaskOnTaskHolder) Name() string{
	return r.h.Name
}

//Playbook returns the playbook linked to the task
func (r TTaskOnTaskHolder) Playbook() string{
	return r.h.Playbook
}

//Cron returns the cron linked to the task
func (r TTaskOnTaskHolder) Cron() string{
	return r.h.Cron
}

//Parameters returns the task parameters
func (r TTaskOnTaskHolder) Parameters() map[string]interface{}{
	return r.h.Parameters
}

//EnvVars returns the task environment variables
func (r TTaskOnTaskHolder) EnvVars() map[string]string{
	return r.h.EnvVars
}

//HasHooks returns true if the task has hooks
func (r TTaskOnTaskHolder) HasHooks() bool{
	return r.h.Hooks.HasTasks()
}

//Hooks returns the task hooks
func (r TTaskOnTaskHolder) Hooks() TTaskHooks{
	    return CreateTTaskHooksForTaskHook(r.h.Hooks)
}

