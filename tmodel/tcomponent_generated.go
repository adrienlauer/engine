package engine

import (
	"github.com/ekara-platform/model"
)

//*****************************************************************************
//
// This file is autogenerated by "go generate .". Do not modify.
//
//*****************************************************************************

// TComponent is a read only component
type TComponent interface {
	//Id returns the name of the component
	Id() string
	//Repository returns the repository where the component is located
	Repository() TRepository
	//HasTemplates returns true if the component has defined templates
	HasTemplates() bool
	//Templates returns true if the component templates
	Templates() []string
}

// ----------------------------------------------------
// Implementation(s) of TComponent
// ----------------------------------------------------

//TComponentOnDistributionHolder is the struct containing the Distribution in order to implement TComponent
type TComponentOnDistributionHolder struct {
	h model.Distribution
}

//CreateTComponentForDistribution returns an holder of Distribution implementing TComponent
func CreateTComponentForDistribution(o model.Distribution) TComponentOnDistributionHolder {
	return TComponentOnDistributionHolder{
		h: o,
	}
}

//Id returns the name of the component
func (r TComponentOnDistributionHolder) Id() string {
	return r.h.Id
}

//Repository returns the repository where the component is located
func (r TComponentOnDistributionHolder) Repository() TRepository {
	return CreateTRepositoryForRepository(r.h.Repository)
}

//HasTemplates returns true if the component has defined templates
func (r TComponentOnDistributionHolder) HasTemplates() bool {
	return len(r.h.Templates.Content) > 0
}

//Templates returns true if the component templates
func (r TComponentOnDistributionHolder) Templates() []string {
	return r.h.Templates.Content
}

//TComponentOnComponentHolder is the struct containing the Component in order to implement TComponent
type TComponentOnComponentHolder struct {
	h model.Component
}

//CreateTComponentForComponent returns an holder of Component implementing TComponent
func CreateTComponentForComponent(o model.Component) TComponentOnComponentHolder {
	return TComponentOnComponentHolder{
		h: o,
	}
}

//Id returns the name of the component
func (r TComponentOnComponentHolder) Id() string {
	return r.h.Id
}

//Repository returns the repository where the component is located
func (r TComponentOnComponentHolder) Repository() TRepository {
	return CreateTRepositoryForRepository(r.h.Repository)
}

//HasTemplates returns true if the component has defined templates
func (r TComponentOnComponentHolder) HasTemplates() bool {
	return len(r.h.Templates.Content) > 0
}

//Templates returns true if the component templates
func (r TComponentOnComponentHolder) Templates() []string {
	return r.h.Templates.Content
}
